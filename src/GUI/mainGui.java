package GUI;

import javax.swing.*;
import model.*;

import java.awt.Graphics;
import java.awt.event.*;
import java.util.Random;

import model.*;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dawid
 */
public class mainGui extends JFrame {

	double windRatio; 	//wspó³czynnik poziomy i pionowy wiatru
	String xDir;
	String yDir;
	String windPow;
	static double thickness=2;
	 double [][] temp = new double[700][570];
	static double[][] table2 = new double[700][570];
	static byte[][] table;
	private Algo a;
	private int ileAgentow;
	private Wind wind;
	private JPanel buttonPanel;
	private JPanel windPanel;
	private JButton okButton;
	private JEditorPane jEditorPane1;
	private JLabel windLabel;
	private JLabel wspLabel;
	private JLabel powerLabel;
	private JPanel jmainGui;
	private JScrollPane jScrollPane2;
	private JTextField powerTextField;
	private JPanel titlePanel;
	private JButton enythingButton;
	private JLabel title;
	private ResultsPanel resultsPanel;
	private JButton startButton;
	private JLabel xLabel;
	private JLabel yLabel;
	private JTextField wspXTextField;
	private JTextField wspYTextField;
	private JLabel ileAgentowLabel;
	private JTextField ileAgentowField;
	private JLabel jakiePoleLabel;
	private JTextField jakiePoleField;
	
	Random generator = new Random();
	//          private org.jdesktop.beansbinding.BindingGroup bindingGroup;
	// End of variables declaration              

	/**
	 * Creates new form mainGui
	 */
	 public mainGui() {
		 initRatios();
		initComponents();
	}

	 /**
	  * Inicjalizacja wspó³czynników, i danych do modelu matematycznego
	  */
	 public void initRatios() {
		xDir = "2";
		yDir = "3";
		windPow = "10";
		windRatio = 0.03;
	 }
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	 @SuppressWarnings("unchecked")
	 // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	 private void initComponents() {

		 table = new byte[700][570];
		 jmainGui = new JPanel();
		 titlePanel = new JPanel();
		 title = new JLabel();
		 buttonPanel = new JPanel();
		 enythingButton = new JButton();
		 startButton = new JButton();
		 windPanel = new JPanel();
		 windLabel = new JLabel();
		 wspLabel = new JLabel();
		 powerLabel = new JLabel();
		 powerTextField = new JTextField();
		 okButton = new JButton();
		 resultsPanel = new ResultsPanel();
		 jScrollPane2 = new JScrollPane();
		 jEditorPane1 = new JEditorPane();
		 xLabel = new JLabel();
		 yLabel = new JLabel();
		 wspXTextField = new JTextField();
		 wspYTextField = new JTextField();
		 ileAgentowLabel = new JLabel();
		 ileAgentowField = new JTextField();

		 

		 
		 setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		 setTitle("Rozprzestrzenianie sie zanieczyszczen");
		 setAutoRequestFocus(false);
		 setBackground(new java.awt.Color(92, 117, 223));
		 setBounds(new java.awt.Rectangle(10, 10, 10, 10));
		 setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		 setForeground(new java.awt.Color(222, 74, 74));

		 jmainGui.setBackground(new java.awt.Color(166, 230, 239));

		 titlePanel.setBackground(new java.awt.Color(95, 155, 228));
		 titlePanel.setBorder(BorderFactory.createMatteBorder(10, 2, 10, 2, new java.awt.Color(1, 7, 110)));
		 titlePanel.setForeground(new java.awt.Color(20, 18, 84));
		 titlePanel.setToolTipText("");

		 title.setFont(new java.awt.Font("LM Mono Caps 10", 1, 24)); // NOI18N
		 title.setForeground(new java.awt.Color(11, 11, 67));
		 title.setText("Symulacja rozprzestrzeniania siê ropy naftowej na wodzie");

		 GroupLayout titlePanelLayout = new GroupLayout(titlePanel);
		 titlePanel.setLayout(titlePanelLayout);
		 titlePanelLayout.setHorizontalGroup(
				 titlePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				 .addGroup(titlePanelLayout.createSequentialGroup()
						 .addGap(34, 34, 34)
						 .addComponent(title)
						 .addContainerGap(59, Short.MAX_VALUE))
				 );
		 titlePanelLayout.setVerticalGroup(
				 titlePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				 .addComponent(title, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				 );

		 buttonPanel.setBackground(new java.awt.Color(95, 155, 228));
		 buttonPanel.setBorder(BorderFactory.createMatteBorder(8, 2, 8, 2, new java.awt.Color(1, 7, 110)));
		 buttonPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

		 enythingButton.setBackground(new java.awt.Color(237, 254, 201));
		 enythingButton.setFont(new java.awt.Font("Droid Sans", 0, 18)); // NOI18N
		 enythingButton.setForeground(new java.awt.Color(2, 9, 126));
		 enythingButton.setText("Coœ siê wymyœli");
		 enythingButton.setActionCommand("Coœ siê wymyœli");
		 enythingButton.setBorder(BorderFactory.createMatteBorder(5, 2, 5, 2, new java.awt.Color(1, 7, 110)));
		 enythingButton.setMaximumSize(new java.awt.Dimension(170, 34));
		 enythingButton.addActionListener(new ActionListener() {
			 public void actionPerformed(ActionEvent evt) {
				 enythingButtonActionPerformed(evt);
			 }
		 });

		 startButton.setBackground(new java.awt.Color(237, 254, 201));
		 startButton.setFont(new java.awt.Font("Droid Sans", 0, 18)); // NOI18N
		 startButton.setForeground(new java.awt.Color(2, 9, 126));
		 startButton.setText("Start");
		 startButton.setBorder(BorderFactory.createMatteBorder(5, 2, 5, 2, new java.awt.Color(1, 7, 110)));
		 startButton.setMaximumSize(new java.awt.Dimension(170, 34));
		 startButton.addActionListener(new ActionListener() {
			 public void actionPerformed(ActionEvent evt) {
				 startButtonActionPerformed(evt);
			 }
		 });

		 okButton.addActionListener(new ActionListener() {
			 public void actionPerformed(ActionEvent evt) {
				 okButtonActionPerformed(evt);
			 }
		 });

		 windPanel.setBackground(new java.awt.Color(95, 155, 228));
		 windPanel.setBorder(BorderFactory.createMatteBorder(4, 1, 4, 1, new java.awt.Color(3, 6, 176)));
		 windPanel.setForeground(new java.awt.Color(3, 6, 176));
		 windPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

		 windLabel.setBackground(new java.awt.Color(214, 114, 14));
		 windLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
		 windLabel.setForeground(new java.awt.Color(2, 9, 126));
		 windLabel.setHorizontalAlignment(SwingConstants.CENTER);
		 windLabel.setText("  WIATR");

		 //   org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, titlePanel, org.jdesktop.beansbinding.ObjectProperty.create(), windLabel, org.jdesktop.beansbinding.BeanProperty.create("border"));
		 //     bindingGroup.addBinding(binding);

		 wspLabel.setForeground(new java.awt.Color(2, 9, 126));
		 wspLabel.setText("   Podaj kierunek wiatru");

		 wspYTextField.setBorder(BorderFactory.createLineBorder(new java.awt.Color(3, 6, 176)));
		 wspXTextField.setBorder(BorderFactory.createLineBorder(new java.awt.Color(3, 6, 176)));
		 wspXTextField.setText(xDir);

		 powerLabel.setForeground(new java.awt.Color(2, 9, 126));
		 powerLabel.setText(" Podaj si³ê");

		 powerTextField.setBorder(BorderFactory.createLineBorder(new java.awt.Color(3, 6, 176)));
		 powerTextField.setText(windPow);

		 okButton.setForeground(new java.awt.Color(2, 9, 126));
		 okButton.setText("OK");

		 xLabel.setForeground(new java.awt.Color(2, 9, 126));
		 xLabel.setText("X:");

		 yLabel.setForeground(new java.awt.Color(2, 9, 126));
		 yLabel.setText("Y:");

		 wspYTextField.setBorder(BorderFactory.createLineBorder(new java.awt.Color(3, 6, 176)));
		 wspYTextField.setText(yDir);
		 wspYTextField.addActionListener(new ActionListener() {
			 public void actionPerformed(ActionEvent evt) {

			 }
		 });


		 GroupLayout windPanelLayout = new GroupLayout(windPanel);
		 windPanel.setLayout(windPanelLayout);
		 windPanelLayout.setHorizontalGroup(
				 windPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				 .addGroup(windPanelLayout.createSequentialGroup()
						 .addGap(4, 4, 4)
						 .addGroup(windPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
								 .addComponent(wspLabel)
								 .addGroup(windPanelLayout.createSequentialGroup()
										 .addGap(20, 20, 20)
										 .addComponent(windLabel, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE))))
										 .addGroup(windPanelLayout.createSequentialGroup()
												 .addGap(25, 25, 25)
												 .addGroup(windPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
														 .addComponent(okButton, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
														 .addComponent(powerTextField, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)))
														 .addGroup(windPanelLayout.createSequentialGroup()
																 .addContainerGap()
																 .addComponent(xLabel)
																 .addGroup(windPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
																		 .addGroup(windPanelLayout.createSequentialGroup()
																				 .addGap(24, 24, 24)
																				 .addComponent(powerLabel)
																				 .addGap(0, 0, Short.MAX_VALUE))
																				 .addGroup(windPanelLayout.createSequentialGroup()
																						 .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
																						 .addComponent(wspXTextField, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
																						 .addGap(38, 38, 38)
																						 .addComponent(yLabel)
																						 .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																						 .addComponent(wspYTextField, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
																						 .addContainerGap())))
				 );
		 windPanelLayout.setVerticalGroup(
				 windPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				 .addGroup(windPanelLayout.createSequentialGroup()
						 .addComponent(windLabel, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
						 .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
						 .addComponent(wspLabel, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
						 .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
						 .addGroup(windPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
								 .addComponent(wspXTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								 .addComponent(xLabel)
								 .addComponent(yLabel)
								 .addComponent(wspYTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
								 .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
								 .addComponent(powerLabel)
								 .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								 .addComponent(powerTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								 .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
								 .addComponent(okButton, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
								 .addGap(26, 26, 26))
				 );

		 ileAgentowLabel.setForeground(new java.awt.Color(2, 9, 126));
		 ileAgentowLabel.setText("Iloœæ agentów:");

		 ileAgentowField.setText("10");
		 
		 

		 GroupLayout buttonPanelLayout = new GroupLayout(buttonPanel);
		 buttonPanel.setLayout(buttonPanelLayout);
		 buttonPanelLayout.setHorizontalGroup(
				 buttonPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				 .addGroup(buttonPanelLayout.createSequentialGroup()
						 .addContainerGap()
						 .addGroup(buttonPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
								 .addComponent(startButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								 .addComponent(enythingButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								 .addComponent(windPanel, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								 .addGroup(buttonPanelLayout.createSequentialGroup()
										 .addComponent(ileAgentowLabel)
										 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										 .addComponent(ileAgentowField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										 .addGap(0, 0, Short.MAX_VALUE)))
										 .addContainerGap())
				 );
		 buttonPanelLayout.setVerticalGroup(
				 buttonPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				 .addGroup(buttonPanelLayout.createSequentialGroup()
						 .addContainerGap()
						 .addComponent(startButton, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
						 .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
						 .addComponent(windPanel, GroupLayout.PREFERRED_SIZE, 176, GroupLayout.PREFERRED_SIZE)
						 .addGap(32, 32, 32)
						 .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								 .addComponent(ileAgentowLabel)
								 .addComponent(ileAgentowField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
								 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 187, Short.MAX_VALUE)

								 .addComponent(enythingButton, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
								 .addGap(29, 29, 29))
				 );

		 resultsPanel.setBackground(new java.awt.Color(95, 155, 228));
		 resultsPanel.setBorder(BorderFactory.createMatteBorder(8, 2, 8, 2, new java.awt.Color(1, 7, 110)));

		 jScrollPane2.setViewportView(jEditorPane1);

		 GroupLayout resultsPanelLayout = new GroupLayout(resultsPanel);
		 resultsPanel.setLayout(resultsPanelLayout);
		 /*   resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
		  */
		 GroupLayout jmainGuiLayout = new GroupLayout(jmainGui);
		 jmainGui.setLayout(jmainGuiLayout);
		 jmainGuiLayout.setHorizontalGroup(
				 jmainGuiLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				 .addGroup(jmainGuiLayout.createSequentialGroup()
						 .addContainerGap()
						 .addGroup(jmainGuiLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
								 .addComponent(titlePanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								 .addGroup(jmainGuiLayout.createSequentialGroup()
										 .addComponent(buttonPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
										 .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
										 .addComponent(resultsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
										 .addContainerGap())
				 );
		 jmainGuiLayout.setVerticalGroup(
				 jmainGuiLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
				 .addGroup(jmainGuiLayout.createSequentialGroup()
						 .addContainerGap()
						 .addComponent(titlePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						 .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
						 .addGroup(jmainGuiLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
								 .addComponent(resultsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								 .addComponent(buttonPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								 .addContainerGap())
				 );

		 GroupLayout layout = new GroupLayout(getContentPane());
		 getContentPane().setLayout(layout);
		 layout.setHorizontalGroup(
				 layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				 .addComponent(jmainGui, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				 );
		 layout.setVerticalGroup(
				 layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				 .addComponent(jmainGui, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				 );

		 //      bindingGroup.bind();

		 pack();
	 }// </editor-fold>                        



	 private void startButtonActionPerformed(ActionEvent evt) {  
		 wind = new Wind(Double.parseDouble(wspXTextField.getText()), Double.parseDouble(wspYTextField.getText()), Integer.parseInt(powerTextField.getText()));
		 a = new Algo();
		 ileAgentow = Integer.parseInt(ileAgentowField.getText());
		 int t = 0;
		 
		 for(int i=0; i<700; i++){
			 for(int j=0; j<570; j++){
				 table2[i][j] = 0;
			 }
		 }
		 
		 for(int i=330; i<330+ileAgentow; i++){
			 for(int j=270; j<270+ileAgentow; j++){
				 table2[i][j] = thickness;
			 }
		 }	 
		 resultsPanel.draw();

		 
		 while(t<80){
			 
			 randomTable2();
			 resultsPanel.draw();
			 t++;
		/*	 try {
	           //     Thread.sleep(100);
	            } catch (InterruptedException e) {
	                e.printStackTrace();
	            }*/
		 }
	//	 a.initialize(ileAgentow);
	//	 System.out.println("windx"+wind.getX());
	//	 a.simulate(resultsPanel, wind.getX(), wind.getY());
		 resultsPanel.draw();
	 }    

	 private void okButtonActionPerformed(ActionEvent evt) {                                              
		 wind = new Wind(Double.parseDouble(wspXTextField.getText()), Double.parseDouble(wspYTextField.getText()), Integer.parseInt(powerTextField.getText()));
	 }  

	 private void enythingButtonActionPerformed(ActionEvent evt) {                                            

	 }                                          

	 
	 public void randomTable(){
		 for(int i=0; i<700; i++){
			 for(int j=0; j<570; j++){
				 table[i][j] = (byte) (generator.nextInt(2)-1);
			 }
		 }
	 }
	 

	 
	 public void randomTable2(){
		double xWind, yWind;
		double xDirection, yDirection;
		double sumOfWindRatios;
		int windPower;
		double pitagorasRatio;
		double [] r = new double[10];			//wspó³czynniki w otoczeniu piksela r[5], którego wartoœæ wyliczamy, a pozosta³e uk³adaj¹ siê zgodnie z numeracj¹ klawiatruy na komórce

		xDirection = wind.getX();
		yDirection = wind.getY();
		windPower = wind.getPower();
		pitagorasRatio = Math.sqrt(Math.pow(xDirection, 2) + Math.pow(yDirection, 2));
		xWind = countWindPower(xDirection, pitagorasRatio, windPower);
		yWind = countWindPower(yDirection, pitagorasRatio, windPower);
		
		if (windPower == 0){
			setDefaultRatios(r);
		}
		else {
			setWindRatios(r, xWind, yWind);
		}
		sumOfWindRatios = sumOfArray(r);
//		showRatios(pitagorasRatio, xWind, yWind, r, xDirection, yDirection, windPower);
		 for(int i=1; i<699; i++){
			 for(int j=1; j<569; j++){
				 temp[i][j] = (r[2]*table2[i-1][j] + r[8]*table2[i+1][j] + r[4]*table2[i][j-1] + r[6]*table2[i][j+1] + r[5]*table2[i][j] + r[1]*table2[i-1][j-1] + r[9]*table2[i+1][j+1] + r[3]*table2[i-1][j+1] + r[7]*table2[i+1][j-1])/sumOfWindRatios;
//				 temp[i][j] = (2*(table2[i-1][j]+table2[i+1][j]+table2[i][j-1]+table2[i][j+1]) + 4*table2[i][j] + (table2[i-1][j-1] + table2[i+1][j+1] + table2[i-1][j+1] + table2[i+1][j-1]))/16;
			 }
		 }
		 for(int i=0; i<700; i++){
			 for(int j=0; j<570; j++){
				 table2[i][j] = temp[i][j];
			 }
		 }
		 
	 }
	 
	 /**
	  * Do zsumowania parametrów wiatru
	  * @param r tablica
	  * @return
	  */
	 public double sumOfArray(double [] r) {
		 double sum = 0;
		 for (int i=1; i<r.length; i++) 
			 sum += r[i];
		 return sum;
	 }
	 
	 /**
	  * Ustalamy wartoœci tablicy r, na podstawie kierunku, wartoœcii wspó³czynnika wiatru
	  * @param r
	  * @param xWind
	  * @param yWind
	  */
	 public void setWindRatios(double [] r, double xWind, double yWind) {
		 resetTab(r);
		 double windXInfluence = windRatio * Math.abs(xWind);
		 double windYInfluence = windRatio * Math.abs(yWind);
		 r[5] = 1;
		 if (xWind > 0 && yWind > 0) 	// SE wind
		 {
		 	r[1] = windXInfluence + windYInfluence;
			r[2] = windYInfluence;
			r[4] = windXInfluence;  
		 }
		 else if (xWind > 0 && yWind == 0)	// E
		 {
		 	r[4] = windXInfluence;
		 }
		 else if (xWind == 0 && yWind > 0)	// S
		 {
		 	r[2] = windYInfluence;
		 }
		 else if (xWind < 0 && yWind > 0) 	// SW wind
		 {
		 	r[3] = windXInfluence + windYInfluence;
			r[2] = windYInfluence;
			r[6] = windXInfluence;  
		 }
		 else if (xWind < 0 && yWind == 0)	// W
		 {
		 	r[6] = windXInfluence;
		 }
		 else if (xWind < 0 && yWind < 0) 	// NW wind
		 {
		 	r[9] = windXInfluence + windYInfluence;
			r[8] = windYInfluence;
			r[6] = windXInfluence;  
		 }
		 else if (xWind == 0 && yWind < 0)	// N
		 {
		 	r[8] = windYInfluence;
		 }
		 else if (xWind > 0 && yWind < 0) 	// NE wind
		 {
		 	r[7] = windXInfluence + windYInfluence;
			r[8] = windYInfluence;
			r[4] = windXInfluence;  
		 }
		 for (int i=1; i<r.length; i++) {
			 if (r[i] > 1) 
				 r[i] = 1;
		 }
	 }
	 
	 /*
	  * Wyœwietla info o wspó³czynnikach i koñczy program
	  */
	 public void showRatios(double pitagorasRatio, double xWind, double yWind, double [] r, double xDir, double yDir, double windPower) {
		 System.out.println("xDirection= " + xDir + "\t yDirection= " + yDir);
		 System.out.println("WindPower = " + windPower);
		 System.out.println("PitagorasRatio= " + pitagorasRatio + "\t windRatio = " + windRatio);
		 System.out.println("xWind= " + xWind + "\t yWind= " + yWind );
		 for (int i=1; i<=1; i++)
			 System.out.println("r[" + i + "]= " + r[i]);
		 
		 System.exit(0);
	 }
	 

	 /**
	  * 
	  * @param directionalValue kierunek wiatru i jego wartosc , czyli wind.getX() lub wind.getY()
	  * @param pitagoras to, pitagorasRatio czyli sqrt(wind.getX()^2 + wind.getY()^2)
	  * @param windPower
	  * @return power of the wind in the certain direction
	  */
	 public double countWindPower(double directionalValue, double pitagoras, int windPower) {
		 return directionalValue / pitagoras * windPower;
	 }
	 
	 public void resetTab(double [] r) {
		 for (int i=1; i< r.length; i++)
			 r[i] = 0;
	 }
	 
	 /*
	  * tworzy standardow¹ maskê wspó³czynników, nr 5 jest indeksem rozpatrywanego w danym momencie piksela, a pozosta³e s¹ jego otoczeniem
	  */
	 public void setDefaultRatios(double[] r) {
	 	int r1,r2,r3;
	 	r1 = 1;
	 	r2 = 2;
	 	r3 = 4;
		 r[1] = r1;
		 r[3] = r1;
		 r[7] = r1;
		 r[9] = r1;
		 r[2] = r2;
		 r[4] = r2;
		 r[6] = r2;
		 r[8] = r2;
		 r[5] = r3;
	 }
	 





	 /**
	  * @param args the command line arguments
	  */
	 public static void main(String args[]) {
		 /* Set the Nimbus look and feel */
		 //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		 /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		  * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		  */
		 try {
			 for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
				 if ("Nimbus".equals(info.getName())) {
					 UIManager.setLookAndFeel(info.getClassName());
					 break;
				 }
			 }
		 } catch (ClassNotFoundException ex) {
			 java.util.logging.Logger.getLogger(mainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		 } catch (InstantiationException ex) {
			 java.util.logging.Logger.getLogger(mainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		 } catch (IllegalAccessException ex) {
			 java.util.logging.Logger.getLogger(mainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		 } catch (UnsupportedLookAndFeelException ex) {
			 java.util.logging.Logger.getLogger(mainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		 }
		 //</editor-fold>

		 /* Create and display the form */
		 java.awt.EventQueue.invokeLater(new Runnable() {
			 public void run() {
				 new mainGui().setVisible(true);
			 }
		 });
	 }

	 // Variables declaration - do not modify                    

}